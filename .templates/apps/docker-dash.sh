#!/bin/bash
####################################
# All rights reserved.              #
# started from Zero                 #
# Docker owned dockserver           #
# Docker Maintainer dockserver      #
#####################################
#####################################
# THIS DOCKER IS UNDER LICENSE      #
# NO CUSTOMIZING IS ALLOWED         #
# NO REBRANDING IS ALLOWED          #
# NO CODE MIRRORING IS ALLOWED      #
#####################################
# shellcheck disable=SC2086
# shellcheck disable=SC2046

FOLDER=$1
APP=$2
USERNAME=$3
TOKEN=$4

### APP SETTINGS ###

BASENEWVERSION=$(curl -sX GET "https://registry.hub.docker.com/v1/repositories/library/alpine/tags" \
   | jq --raw-output '.[] | select(.name | contains(".")) | .name' \
   | sort -t "." -k1,1n -k2,2n -k3,3n | tail -n1)

BASENEWVERSION="${BASENEWVERSION#*v}"
BASENEWVERSION="${BASENEWVERSION#*release-}"
BASRNEWVERSION="${BASENEWVERSION}"

APPLINK="https://api.github.com/repos/MauriceNino/dashdot"
NEWVERSION=$(curl -sX GET "https://api.github.com/repos/sct/overseerr/commits?sha=${APPBRANCH}" | jq -r 'first(.[] | select(.commit.message | contains("[skip ci]") | not)) | .sha')
NEWVERSION="${NEWVERSION#*v}"
NEWVERSION="${NEWVERSION#*release-}"
NEWVERSION="${NEWVERSION}"

HEADLINE="$(cat ./.templates/headline.txt)"
DESCRIPTION="$(curl -u $USERNAME:$TOKEN -sX GET "$APPLINK" | jq -r '.description')"
BASEIMAGE="alpine"

INSTCOMMAND="apk add -U --update --no-cache"
PACKAGES="git bash ca-certificates shadow"

GITAPP="git clone --quiet https://github.com/MauriceNino/dashdot.git /app"
CLEANUP="rm -rf /app/*.md /app/_doc /app/Dockerfile /app/docker-compose.yml"

## FINALIMAGE
FINALIMAGE="node:16-alpine3.15"
BUILDSTAGE="--from=buildstage /app /app"
PACKAGESBUILD="ca-certificates dmidecode util-linux lsblk"
NPMINSTALL="yarn --frozen-lockfile && yarn build"

APPFOLDER="./$FOLDER/$APP"

### RELEASE SETTINGS ###

echo '{
   "appname": "'${APP}'",
   "apppic": "'${PICTURE}'",
   "appfolder": "./'$FOLDER'/'$APP'",
   "newversion": "'${NEWVERSION}'",
   "baseimage": "'${BASEIMAGE}'",
   "baseversion": "'${BASENEWVERSION}'",
   "description": "'${DESCRIPTION}'",
   "body": "Upgrading '${APP}' to '${NEWVERSION}'",
   "user": "dockserver-image[bot]"
}' > "./$FOLDER/$APP/release.json"

### DOCKER BUILD ###
### GENERATE Dockerfile based on release.json

echo '## This file is automatically generated (based on release.json)
##
## Do not changes any lines here
##
'"${HEADLINE}"'
FROM '"${BASEIMAGE}"':'"${BASENEWVERSION}"' as buildstage
LABEL org.opencontainers.image.source="'"https://github.com/dockserver/container"'"

ARG TARGETPLATFORM
ARG BUILDPLATFORM

RUN \
  echo "'"**** install build packages ****"'" && \
    '"${INSTCOMMAND}"' '"${PACKAGES}"' && \
    mkdir -p /app && \
    '"${GITAPP}"' && \
    '"${CLEANUP}"'

FROM '"${FINALIMAGE}"'

COPY '"${BUILDSTAGE}"'

ENV DASHDOT_OS_WIDGET_ENABLE="'"true"'" \
    DASHDOT_CPU_WIDGET_ENABLE="'"true"'" \
    DASHDOT_CPU_DATAPOINTS="'"20"'" \
    DASHDOT_CPU_POLL_INTERVAL="'"1000"'" \
    DASHDOT_RAM_WIDGET_ENABLE="'"true"'" \
    DASHDOT_RAM_POLL_INTERVAL="'"1000"'" \
    DASHDOT_STORAGE_WIDGET_ENABLE="'"true"'"

WORKDIR /app

RUN \
  echo "'"**** install final packages ****"'" && \
    '"${INSTCOMMAND}"' '"${PACKAGESBUILD}"' && \
    mkdir -p /app && \
    '"${NPMINSTALL}"'

CMD ["'"yarn"'", "'"start"'"]
##EOF' > ./$FOLDER/$APP/Dockerfile
