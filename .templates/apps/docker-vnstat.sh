#!/bin/bash
####################################
# All rights reserved.              #
# started from Zero                 #
# Docker owned dockserver           #
# Docker Maintainer dockserver      #
#####################################
#####################################
# THIS DOCKER IS UNDER LICENSE      #
# NO CUSTOMIZING IS ALLOWED         #
# NO REBRANDING IS ALLOWED          #
# NO CODE MIRRORING IS ALLOWED      #
#####################################
# shellcheck disable=SC2086
# shellcheck disable=SC2046

FOLDER=$1
APP=$2
USERNAME=$3
TOKEN=$4

### APP SETTINGS ###
APPLINK="https://api.github.com/repos/Hulxv/vnstat-client"

NEWVERSION=$(curl -u $USERNAME:$TOKE -sX GET "https://api.github.com/repos/Hulxv/vnstat-client/releases/latest" | jq -r '. | .tag_name')
NEWVERSION="${NEWVERSION#*v}"
NEWVERSION="${NEWVERSION#*v}"
NEWVERSION="${NEWVERSION#*release-}"
NEWVERSION="${NEWVERSION}"

HEADLINE="$(cat ./.templates/headline.txt)"
DESCRIPTION="$(curl -u $USERNAME:$TOKEN -sX GET "$APPLINK" | jq -r '.description')"

INSTCOMMAND="apk add -U --update --no-cache"
PACKAGES="wget curl jq bash ca-certificates shadow"

UPCOMMAND="apk --quiet --no-cache --no-progress update && \\
    apk --quiet --no-cache --no-progress upgrade"

CLEANUP="apk del --quiet --clean-protected --no-progress && \\
    rm -f /var/cache/apk/*"

## IMAGE
FINALIMAGE="node:alpine3.15"
PACKAGESBUILD="curl wget jq yarn ca-certificates bash"
APPFOLDER="./$FOLDER/$APP"

### RELEASE SETTINGS ###

echo '{
   "appname": "'${APP}'",
   "apppic": "'${PICTURE}'",
   "appfolder": "./'$FOLDER'/'$APP'",
   "newversion": "'${NEWVERSION}'",
   "finalimage": "'${FINALIMAGE}'",
   "description": "'${DESCRIPTION}'",
   "body": "Upgrading '${APP}' to '${NEWVERSION}'",
   "user": "dockserver-image[bot]"
}' > "./$FOLDER/$APP/release.json"

### DOCKER BUILD ###
### GENERATE Dockerfile based on release.json

echo '## This file is automatically generated (based on release.json)
##
## Do not changes any lines here
##
'"${HEADLINE}"'
FROM alpine:latest AS base
LABEL org.opencontainers.image.source="'"https://github.com/dockserver/container"'"

ENV HTTP_PORT=8685
ENV HTTP_BIND=*
ENV HTTP_LOG=/dev/stdout
ENV LARGE_FONTS=0
ENV CACHE_TIME=1
ENV RATE_UNIT=1
ENV PAGE_REFRESH=0
ENV RUN_VNSTATD=1

RUN true \
    && set -ex \
    && apk add --no-cache \
        gd \
        perl \
        lighttpd \
        sqlite-libs \
        curl

FROM alpine:latest AS builder

RUN true \
    && set -ex \
    && apk add --no-cache gcc make musl-dev linux-headers gd-dev sqlite-dev git \
    && git clone --depth 1 https://github.com/vergoh/vnstat \
    && cd vnstat \
    && ./configure --prefix=/usr --sysconfdir=/etc \
    && make \
    && make install

FROM base AS runtime

COPY --from=builder /usr/bin/vnstat /usr/bin/vnstat
COPY --from=builder /usr/bin/vnstati /usr/bin/vnstati
COPY --from=builder /usr/sbin/vnstatd /usr/sbin/vnstatd
COPY --from=builder /etc/vnstat.conf /etc/vnstat.conf
COPY --from=builder vnstat/examples/vnstat.cgi /var/www/localhost/htdocs/index.cgi
COPY --from=builder vnstat/examples/vnstat-json.cgi /var/www/localhost/htdocs/json.cgi

RUN true \
    && set -ex \
    && addgroup -S vnstat  \
    && adduser -S -h /var/lib/vnstat -s /sbin/nologin -g vnStat -D -H -G vnstat vnstat

VOLUME /var/lib/vnstat
EXPOSE ${HTTP_PORT}

COPY '"${APPFOLDER}"'/root/favicon.ico /var/www/localhost/htdocs/favicon.ico
COPY '"${APPFOLDER}"'/root/start.sh /start.sh

RUN chmod 777 /start.sh

CMD [ "'"/start.sh"'" ]
##EOF' > ./$FOLDER/$APP/Dockerfile
