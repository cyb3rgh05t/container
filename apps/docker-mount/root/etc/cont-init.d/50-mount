#!/command/with-contenv bash
# shellcheck shell=bash
#####################################
# All rights reserved.              #
# started from Zero                 #
# Docker owned dockserver           #
# Docker Maintainer dockserver      #
#####################################
#####################################
# THIS DOCKER IS UNDER LICENSE      #
# NO CUSTOMIZING IS ALLOWED         #
# NO REBRANDING IS ALLOWED          #
# NO CODE MIRRORING IS ALLOWED      #
#####################################
function log() {
   echo "[Mount] ${1}"
}

SDOWN=/mnt/downloads
SMOUNT=/app/mount
SUNION=/mnt/unionfs
APP=/app
SYSAPP=/system/
TMPRCLONE=${TMPRCLONE}
LOGS=/system/mount/logs
JSONDIR=/system/mount/keys
JSONSET=/system/mount/.keys
JSONUSED=/system/mount/.keys/.usedkeys
CONFIG=/app/rclone/rclone.conf
CSV=/system/mount/drive.csv
ENDCONFIG=/app/rclone/rclone.conf
SOURCECONFIG=/system/rclone/rclone.conf
ENDFILE=/system/mount/drive.csv
TMPCONFIG=/app/rclone/rclonegd.conf

## ADD USER
addgroup -S abc &>/dev/null
adduser -S abc -G abc &>/dev/null
PGID=${PGID:-1000} &>/dev/null
PUID=${PUID:-1000} &>/dev/null

groupmod -o -g "$PGID" abc &>/dev/null
usermod -o -u "$PUID" abc &>/dev/null

echo "----------------------------------------------------
     GID/UID
----------------------------------------------------
     User uid:    ${PUID}
     User gid:    ${PGID}
----------------------------------------------------"

   cat > /etc/apk/repositories << EOF; $(echo)
http://dl-cdn.alpinelinux.org/alpine/v$(cat /etc/alpine-release | cut -d'.' -f1,2)/main
http://dl-cdn.alpinelinux.org/alpine/v$(cat /etc/alpine-release | cut -d'.' -f1,2)/community
http://dl-cdn.alpinelinux.org/alpine/edge/testing
EOF

cat > /etc/fuse.conf << EOF; $(echo)
# Set the maximum number of FUSE mounts allowed to non-root users.
mount_max = 20
# mount options.
user_allow_other
EOF

log "**** update system packages ****" && \
   apk --quiet --no-progress update && \
   apk --quiet --no-progress upgrade

log "**** install build packages from requirements ****" && \
   cat /app/requirements.txt | while IFS=$'\n' read -ra myArray; do
      apk add --quiet --no-progress --update ${myArray[@]}
   done

mkdir -p /app/rclone /system/mount/{logs,env,rclone,keys}

rcloneenv=/system/mount/mount.env
rclonetmp=/tmp/mount.env
rclonesample=/app/env/sample.env

UAGENT=${UAGENT:-null}
if [[ ${UAGENT} == 'null' ]]; then
   UAGENT=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)
else
   UAGENT=${UAGENT}
fi
if [[ ! -f ${rcloneenv} ]]; then
   mv ${rclonesample} ${rclonetmp}
else
   mv ${rcloneenv} ${rclonetmp}
fi

source ${rclonetmp}

echo -e "#-------------------------------------------------------
#   MOUNT ENVIRONMENT
#-------------------------------------------------------
## USER VALUES
PUID=${PUID:-1000}
PGID=${PGID:-1000}
TIMEZONE=${TZ:-UTC}

## CRITICAL SETUP FOR CRYPT USER
HASHPASSWORD=${HASHPASSWORD:-hashed}

## MERGERFS ADDITIONAL FOLDER
ADDITIONAL_MOUNT=${ADDITIONAL_MOUNT:-null}
ADDITIONAL_MOUNT_PERMISSION=${ADDITIONAL_MOUNT_PERMISSION:-RW}

## RCLONE - SETTINGS
TMPRCLONE=${TMPRCLONE:-/mnt/rclone_cache}
UAGENT=${UAGENT}

## LOG - SETTINGS
LOGLEVEL=${LOGLEVEL:-INFO}

## DISCORD
DISCORD_SEND=${DISCORD_SEND:-null}
DISCORD_WEBHOOK_URL=${DISCORD_WEBHOOK_URL:-null}
DISCORD_EMBED_TITEL=${DISCORD_EMBED_TITEL:-MOUNT_INFORMATIONS}
DISCORD_ICON_OVERRIDE=${DISCORD_ICON_OVERRIDE:-https://i.imgur.com/MZYwA1I.png}
DISCORD_NAME_OVERRIDE=${DISCORD_NAME_OVERRIDE:-MOUNT}

## NZB CLEANUP-CONTROLLE
NZBCLEANUP=${NZBCLEANUP:-false}
DRIVEUSEDPERCENT=${DRIVEUSEDPERCENT:-75}
NZBBACKUPFOLDER=${NZBBACKUPFOLDER:-/mnt/nzb}
NZBBACKUPTIME=${NZBBACKUPTIME:-240}
NZBDOWNLOADFOLDER=${NZBDOWNLOADFOLDER:-/mnt/downloads/nzb}
NZBDOWNLOADFOLDERTIME=${NZBDOWNLOADFOLDERTIME:-10800}

## LANGUAGE MESSAGES
LANGUAGE=${LANGUAGE:-en}

#-------------------------------------------------------
#   MOUNT ENVIRONMENT
#-------------------------------------------------------" >${rcloneenv}

if [[ -f ${rclonetmp} ]]; then rm -f ${rclonetmp} ; fi

source ${rcloneenv}

for folder in ${TMPRCLONE} ${SUNION} ${SDOWN} ${SMOUNT} ${APP} ${SYSAPP} ${JSONSET}; do
  if [[ ! -d "$folder" ]]; then
     log "Folder not exist || create now %s" "$folder" && \
     $(which mkdir) -p "$folder" && \
     $(which chown) $PUID:$PUID "$folder"
  else
     log "Folder exist || set now permissions on $folder" && \
     $(which chown) $PUID:$PUID "$folder"
  fi
done

source /system/mount/mount.env
ARRAY=$(ls -A ${JSONDIR} | wc -l)

if [[ ${ARRAY} != 4 ]]; then
   for f in /system/mount/keys/*; do
       $(which mv) -f "${f}" "${f//GDSA/}" &>/dev/null
   done
   newServiceAccount=$($(which find) ${JSONDIR}/*.json -type f | shuf -n 1)
   RemoteList=$($(which rclone) config dump --config=${SOURCECONFIG} | jq -r 'to_entries | (.[] | select(.value.team_drive)) | .key')
   while IFS= read -r remote; do
       newServiceAccount=$($(which find) ${JSONDIR}/*.json -type f | shuf -n 1)
       echo "$newServiceAccount" > ${JSONUSED}
       log "Rclone : using service account ${newServiceAccount} for remote ${remote}"
       $(which rclone) config update $remote service_account_file $JSONDIR/${newServiceAccount$ --config=${CONFIG}
       $(which rclone) config update $remote service_account_file_path $JSONDIR --config=${CONFIG}
   done <<< "$RemoteList"
fi

source /system/mount/mount.env

## Wird als source file genommen 
[${myArray[0]}]
type = drive
scope = drive
use_trash = false
chunk_size = 128M
acknowledge_abuse = true
pacer_min_sleep = 1ms
pacer_burst = 5000
team_drive = ${myArray[1]}
server_side_across_configs = true
service_account_file = ${JSONDIR}/${newServiceAccount}
service_account_file_path = ${JSONDIR}

[${myArray[0]}crypt]
type = crypt
remote = ${myArray[0]}:/encrypt
filename_encryption = standard
directory_name_encryption = true
password = ${ENC_PASSWORD}
password2 = ${ENC_SALT}


## Von a nach b ohne viel Mühe und kein CP oder bind mount
## Wenn keine team drive id's gefunden worden sind  für alle anderen dann möglich 
(envsubst < /system/rclone/rclone.conf) >> /app/rclone/rclone.conf






#### Das hier muss neu  und einfacher werden 



ARRAY=$(ls -A ${JSONDIR} | wc -l)
if [[ ${ARRAY} != 0 ]]; then
   if [[ -f $TMPCONFIG ]]; then rm -rf $TMPCONFIG ; fi
   if [[ ! -f $TMPCONFIG ]]; then awk '$1~search {p=1} NF==0 {p=0}; p' search="gdrive|gcrypt" $SOURCECONFIG >$TMPCONFIG ; fi
   if [[ ! -f $ENDFILE ]]; then
      IFS=$'\n'
      filter="$1"
      mapfile -t mounts < <(eval rclone listremotes --config=$SOURCECONFIG | grep "$1" |  grep 't' |  sed '/gd/d' | sed '/remo/d' | sed '/crypt/d')
      for i in ${mounts[@]}; do
         NRTD=$((NRTD + 1))
         TDID=$($(which rclone) config show $i --config=${SOURCECONFIG} | egrep team_drive | awk $'{print $3}')
         GETP=$(grep -C7 "$TDID" $SOURCECONFIG | tail -1 | sed "s/\[//g" | sed "s/\]//g" | awk $'{print $3}')
         GETS=$(grep -C8 "$TDID" $SOURCECONFIG | tail -1 | sed "s/\[//g" | sed "s/\]//g" | awk $'{print $3}')
         LREMO=$($(which rclone) listremotes --config=$SOURCECONFIG | grep "$1" | sed -e 's/://g' | sed '/union/d' | sed '/remote/d' | sed '/GDSA/d' | sed '/gdrive/d' | sed '/crypt/d' | wc -l)
         RCRYPT=$(grep $i:/encrypt $SOURCECONFIG | sed "s/\[//g" | sed "s/\]//g" | awk $'{print $3}')
         if [[ $RCRYPT != "" ]]; then
            echo -e "tdrive$NRTD|${TDID}|${GETP}|${GETS}" >>$ENDFILE
         else
            echo -e "tdrive$NRTD|${TDID}" >>$ENDFILE
         fi
      done
   else
      echo "${ENDFILE} exist"
   fi
   if [[ -f $ENDCONFIG ]]; then sed -i '/^$/d' $ENDCONFIG; fi
   if [[ -f $ENDCONFIG ]]; then rm -rf $ENDCONFIG; fi
   newServiceAccount=$($(which find) ${JSONDIR}/*.json -type f | shuf -n 1)
   sed '/^\s*#.*$/d' $ENDFILE | while IFS=$'|' read -r -a myArray; do
      if [[ ${myArray[2]} == "" && ${myArray[3]} == "" ]]; then

echo -e "\n
[${myArray[0]}]
type = drive
scope = drive
server_side_across_configs = true
service_account_file = ${JSONDIR}/${newServiceAccount}
service_account_file_path = ${JSONDIR}
team_drive = ${myArray[1]}" >>$ENDCONFIG

         rclone lsd ${myArray[0]}: --drive-service-account-file=$JSONDIR/${newServiceAccount} --fast-list --config=$ENDCONFIG
         if [ $? != 0 ]; then rclone config delete ${myArray[0]} --config=$ENDCONFIG ; fi
      else

echo -e "\n
[${myArray[0]}]
type = drive
scope = drive
server_side_across_configs = true
service_account_file = ${JSONDIR}/${newServiceAccount}
service_account_file_path = ${JSONDIR}
team_drive = ${myArray[1]}" >>$ENDCONFIG

         rclone lsd ${myArray[0]}: --drive-service-account-file=$JSONDIR/${newServiceAccount} --fast-list --config=$ENDCONFIG
         if [ $? != 0 ]; then
            $(which rclone) config delete ${myArray[0]} --config=$ENDCONFIG
         else
            if [[ ${HASHPASSWORD} == "plain" && ${HASHPASSWORD} != "hashed" ]] ; then
               ENC_PASSWORD=$(rclone obscure ${myArray[2]} | tail -n1)
               ENC_SALT=$(rclone obscure ${myArray[3]} | tail -n1)
            else
               ENC_PASSWORD=${myArray[2]}
               ENC_SALT=${myArray[3]}

echo -e "\n[tcrypt-${myArray[0]}]
type = crypt
remote = ${myArray[0]}:/encrypt
filename_encryption = standard
directory_name_encryption = true
password = ${ENC_PASSWORD}
password2 = ${ENC_SALT}" >>$ENDCONFIG

               $(which rclone) mkdir ${myArray[0]}:/encrypt --drive-service-account-file=$JSONDIR/${newServiceAccount} --config=$ENDCONFIG
            fi
         fi
      fi
   done
   if [[ -f $TMPCONFIG ]]; then awk '$1~search {p=1} NF==0 {p=0}; p' search="gdrive|gcrypt" $TMPCONFIG >>$ENDCONFIG ; fi
else
   if [[ ! -f $ENDCONFIG ]]; then ln -sv $SOURCECONFIG $ENDCONFIG ; else rm -rf $ENDCONFIG && ln -sv $SOURCECONFIG $ENDCONFIG ; fi
fi

#### DER HIER MUSS BLEIBEN ####
#### rclone union hier     ####
CONFIG=/app/rclone/rclone.conf
mapfile -t mapped < <(eval rclone listremotes --config=${CONFIG} | sort -u)
for i in ${mapped[@]}; do
    $(which rclone) config create remote union upstreams $i action_policy 'all' create_policy 'all' search_policy 'all' cache_time 120 --config=${CONFIG}
done

apk add --quiet --no-progress --update coreutils
mkdir -p /root/.config/rclone/
mount --bind /app/rclone/ /root/.config/rclone/

echo "------------------------------
    _____   _   _  __  __
   |_   _| | | | | \ \/ /
     | |   | |_| |  \  / 
     | |   |  _  |  /  \ 
     |_|   |_| |_| /_/\_\
------------------------------
     to all the coders

We have take some code from :

  88lex , RTRO , edrock200
 ChaoticWeg & linuxserver.io

       and all other
  If we missed you, sorry..
------------------------------"
rm -rf /tmp/mount.env && cp -r /system/mount/mount.env /tmp/mount.env

chmod -cR 777 /system /app /root /etc/logrotate.d $(which rclone) $(which mergerfs) &>/dev/null
chown -cR $PUID:$PUID /system /app /root /etc/logrotate.d $(which rclone) $(which mergerfs) &>/dev/null
chmod u+s $(which rclone) &>/dev/null
chmod u+s $(which mergerfs) &>/dev/null
#E-o-F#
