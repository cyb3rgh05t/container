#!/command/with-contenv bash
# shellcheck shell=bash
#####################################
# All rights reserved.              #
# started from Zero                 #
# Docker owned dockserver           #
# Docker Maintainer dockserver      #
#####################################
#####################################
# THIS DOCKER IS UNDER LICENSE      #
# NO CUSTOMIZING IS ALLOWED         #
# NO REBRANDING IS ALLOWED          #
# NO CODE MIRRORING IS ALLOWED      #
#####################################
function log() {
   echo "[Mount] ${1}"
}

SDOWN=/mnt/downloads
SMOUNT=/app/mount
SUNION=/mnt/unionfs
APP=/app
SYSAPP=/system/
TMPRCLONE=${TMPRCLONE}
LOGS=/system/mount/logs
JSONDIR=/system/mount/keys
JSONSET=/system/mount/.keys
JSONUSED=/system/mount/.keys/.usedkeys
CONFIG=/app/rclone/rclone.conf
CSV=/system/mount/drive.csv
ENDCONFIG=/app/rclone/rclone.conf
SOURCECONFIG=/system/rclone/rclone.conf
ENDFILE=/system/mount/drive.csv
TMPCONFIG=/app/rclone/rclonegd.conf

## ADD USER
addgroup -S abc &>/dev/null
adduser -S abc -G abc &>/dev/null
PGID=${PGID:-1000} &>/dev/null
PUID=${PUID:-1000} &>/dev/null

groupmod -o -g "$PGID" abc &>/dev/null
usermod -o -u "$PUID" abc &>/dev/null

echo "----------------------------------------------------
     GID/UID
----------------------------------------------------
     User uid:    ${PUID}
     User gid:    ${PGID}
----------------------------------------------------"

   cat > /etc/apk/repositories << EOF; $(echo)
http://dl-cdn.alpinelinux.org/alpine/v$(cat /etc/alpine-release | cut -d'.' -f1,2)/main
http://dl-cdn.alpinelinux.org/alpine/v$(cat /etc/alpine-release | cut -d'.' -f1,2)/community
http://dl-cdn.alpinelinux.org/alpine/edge/testing
EOF

cat > /etc/fuse.conf << EOF; $(echo)
# Set the maximum number of FUSE mounts allowed to non-root users.
mount_max = 20
# mount options.
user_allow_other
EOF

log "**** update system packages ****" && \
   apk --quiet --no-progress update && \
   apk --quiet --no-progress upgrade

log "**** install build packages from requirements ****" && \
   cat /app/requirements.txt | while IFS=$'\n' read -ra myArray; do
      apk add --quiet --no-progress --update ${myArray[@]}
   done

mkdir -p /app/rclone /system/mount/{logs,env,rclone,keys}

rcloneenv=/system/mount/mount.env
rclonetmp=/tmp/mount.env
rclonesample=/app/env/sample.env

UAGENT=${UAGENT:-null}
if [[ ${UAGENT} == 'null' ]]; then
   UAGENT=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)
else
   UAGENT=${UAGENT}
fi
if [[ ! -f ${rcloneenv} ]]; then
   mv ${rclonesample} ${rclonetmp}
else
   mv ${rcloneenv} ${rclonetmp}
fi

source ${rclonetmp}

echo -e "#-------------------------------------------------------
#   MOUNT ENVIRONMENT
#-------------------------------------------------------
## USER VALUES
PUID=${PUID:-1000}
PGID=${PGID:-1000}
TIMEZONE=${TZ:-UTC}

## CRITICAL SETUP FOR CRYPT USER
HASHPASSWORD=${HASHPASSWORD:-hashed}

## MERGERFS ADDITIONAL FOLDER
ADDITIONAL_MOUNT=${ADDITIONAL_MOUNT:-null}
ADDITIONAL_MOUNT_PERMISSION=${ADDITIONAL_MOUNT_PERMISSION:-RW}

## RCLONE - SETTINGS
UMASK=${UMASK:-18}
DRIVETRASH=${DRIVETRASH:-false}
DRIVE_CHUNK_SIZE=${DRIVE_CHUNK_SIZE:-128M}
BUFFER_SIZE=${BUFFER_SIZE:-32M}
TMPRCLONE=${TMPRCLONE:-/mnt/rclone_cache}
UAGENT=${UAGENT}
TPSLIMIT=${TPSLIMIT:-20}
TPSBURST=${TPSBURST:-20}

## VFS - SETTINGS
VFS_READ_CHUNK_SIZE=${VFS_READ_CHUNK_SIZE:-128M}
VFS_READ_CHUNK_SIZE_LIMIT=${VFS_READ_CHUNK_SIZE_LIMIT:-4096M}
VFS_CACHE_MAX_SIZE=${VFS_CACHE_MAX_SIZE}
VFS_REFRESH=${VFS_REFRESH:-12h}

## LOG - SETTINGS
LOGLEVEL=${LOGLEVEL:-INFO}

## DISCORD
DISCORD_SEND=${DISCORD_SEND:-null}
DISCORD_WEBHOOK_URL=${DISCORD_WEBHOOK_URL:-null}
DISCORD_EMBED_TITEL=${DISCORD_EMBED_TITEL:-MOUNT_INFORMATIONS}
DISCORD_ICON_OVERRIDE=${DISCORD_ICON_OVERRIDE:-https://i.imgur.com/MZYwA1I.png}
DISCORD_NAME_OVERRIDE=${DISCORD_NAME_OVERRIDE:-MOUNT}

## NZB CLEANUP-CONTROLLE
NZBCLEANUP=${NZBCLEANUP:-false}
DRIVEUSEDPERCENT=${DRIVEUSEDPERCENT:-75}
NZBBACKUPFOLDER=${NZBBACKUPFOLDER:-/mnt/nzb}
NZBBACKUPTIME=${NZBBACKUPTIME:-240}
NZBDOWNLOADFOLDER=${NZBDOWNLOADFOLDER:-/mnt/downloads/nzb}
NZBDOWNLOADFOLDERTIME=${NZBDOWNLOADFOLDERTIME:-10800}

## LANGUAGE MESSAGES
LANGUAGE=${LANGUAGE:-en}

#-------------------------------------------------------
#   MOUNT ENVIRONMENT
#-------------------------------------------------------" >${rcloneenv}

if [[ -f ${rclonetmp} ]]; then rm -f ${rclonetmp} ; fi

source ${rcloneenv}

for folder in ${TMPRCLONE} ${SUNION} ${SDOWN} ${SMOUNT} ${APP} ${SYSAPP} ${JSONSET}; do
  if [[ ! -d "$folder" ]]; then
     log "Folder not exist || create now %s" "$folder" && \
     $(which mkdir) -p "$folder" && \
     $(which chown) $PUID:$PUID "$folder"
  else
     log "Folder exist || set now permissions on $folder" && \
     $(which chown) $PUID:$PUID "$folder"
  fi
done

source /system/mount/mount.env

ARRAY=$(ls -A ${JSONDIR} | wc -l)
if [[ ! -f $ENDFILE && ${ARRAY} != 4 ]] ; then
   (envsubst < /system/rclone/rclone.conf) >> /app/rclone/rclone.conf
   for f in /system/mount/keys/*; do
       $(which mv) -f "${f}" "${f//GDSA/}" &>/dev/null
   done
   newServiceAccount=$($(which find) ${JSONDIR}/*.json -type f | shuf -n 1)
   RemoteList=$($(which rclone) config dump --config=${CONFIG} | jq -r 'to_entries | (.[] | select(.value.team_drive)) | .key')
   while IFS= read -r remote; do
       newServiceAccount=$($(which find) ${JSONDIR}/*.json -type f | shuf -n 1)
       echo "$newServiceAccount" > ${JSONUSED}
       log "Rclone : using service account ${newServiceAccount} for remote ${remote}"
       $(which rclone) config update $remote service_account_file ${newServiceAccount} --config=${CONFIG}
       $(which rclone) config update $remote service_account_file_path $JSONDIR --config=${CONFIG}
   done <<< "$RemoteList"
fi

#### rclone union ####
CONFIG=/app/rclone/rclone.conf

$(which rclone) config delete remote --config=${CONFIG}
ARRAY=$(ls -A ${JSONDIR} | wc -l)
if [[ -f $ENDFILE && ${ARRAY} != 4 ]] ; then
   for f in /system/mount/keys/*; do
       $(which mv) -f "${f}" "${f//GDSA/}" &>/dev/null
   done
   newServiceAccount=$($(which find) ${JSONDIR}/*.json -type f | shuf -n 1)
   source /system/mount/mount.env
   sed '/^\s*#.*$/d' $ENDFILE | while IFS=$'|' read -r -a myArray; do
      if [[ ${myArray[2]} == "" && ${myArray[3]} == "" ]]; then
         $(which rclone) config create ${myArray[0]} drive scope 'drive' server_side_across_configs 'true' team_drive '${myArray[2]}' service_account_file ${newServiceAccount} service_account_file_path $JSONDIR --config=${CONFIG}
      fi
      if [[ ${myArray[2]} != "" && ${myArray[3]} != "" ]]; then
         if [[ ${HASHPASSWORD} == "plain" && ${HASHPASSWORD} != "hashed" ]] ; then
            ENC_PASSWORD=$($(which rclone) obscure ${myArray[2]} | tail -n1)
            ENC_SALT=$($(which rclone) obscure ${myArray[3]} | tail -n1)
         else
            ENC_PASSWORD=${myArray[2]}
            ENC_SALT=${myArray[3]}
         fi
         $(which rclone) config create ${myArray[0]}-crypt crypt remote '${myArray[0]}:/encrypt' filename_encryption 'standard' directory_name_encryption 'true' password '$ENC_PASSWORD' password2 '$ENC_SALT' --config=${CONFIG}
      fi
   done
fi

value=/tmp/rcunion.union
if [[ -f ${value} ]]; then rm -rf ${value}; fi
IFS=$'\n'
filter="$1"
CONFIG=/app/rclone/rclone.conf
mapfile -t mounts < <(eval rclone listremotes --config=${CONFIG} | grep "$filter" | sed -e 's/://g' | sed '/remote/d' | sed '/union/d' | sed '/download/d' | sed '/remote/d' | sed '/GDSA/d')
for i in ${mounts[@]}; do
   echo -n "$i: " >>${value}
done
mapfile -t mapped < <(eval cat ${value})
for i in ${mapped[@]}; do
  $(which rclone) config create remote union upstreams $i action_policy 'all' create_policy 'all' search_policy 'all' cache_time 120 --config=${CONFIG}
done

mkdir -p /root/.config/rclone/
mount --bind /app/rclone/ /root/.config/rclone/

echo "------------------------------
    _____   _   _  __  __
   |_   _| | | | | \ \/ /
     | |   | |_| |  \  / 
     | |   |  _  |  /  \ 
     |_|   |_| |_| /_/\_\
------------------------------
     to all the coders

We have take some code from :

  88lex , RTRO , edrock200
 ChaoticWeg & linuxserver.io

       and all other
  If we missed you, sorry..
------------------------------"
rm -rf /tmp/mount.env && cp -r /system/mount/mount.env /tmp/mount.env

chmod -cR 777 /system /app /root /etc/logrotate.d $(which rclone) $(which mergerfs) &>/dev/null
chown -cR $PUID:$PUID /system /app /root /etc/logrotate.d $(which rclone) $(which mergerfs) &>/dev/null
chmod u+s $(which rclone) &>/dev/null
chmod u+s $(which mergerfs) &>/dev/null
#E-o-F#
